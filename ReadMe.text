클래스, 객체, 인스턴스
클래스는 설계도이고, 이설계도를 기반으로 실제 메모리에 만들어진(new 로 생성) 실체를 객체또는 인스턴스라고한다. 둘다 같은 의미로 사용

int , long, double, boolean 등등은 원시타입형 이라 소문자로 시작
String 은 클래스라 앞에 대문자로 시작한다
자바에서는 클래스는 앞에 대문자를 사용한다.

new 로 사용해서 객체를 생성하게되면 자동으로 초기화를 해준다.
int = 0, boolean = false, 참조형 = null

***** 자바에서는 아무도 참조하지않는 인스턴스가있으면 JVM 의 GC가 더이상 사용하지않는 인스턴스라고 판단하고 자동으로 메모리에서 삭제해준다.

정리
대원칙: 자바는 항상 변수의 값을 복사해서 대입한다.
기본형이면 변수에 들어있는 실제값을 복사해서 대입하고
참조형이면 변수에 들어있는 참조값을 복사해서 대입한다.

- 기본형 vs 참조형 (기본)
    - 자바의 데이터 타입을 가장 크게 보면 기본형과 참조형으로 나눌수있다.
    - 기본형을 제외한 나머지 변수는 모두 참조형이다. 클래스와 배열을 다루는 변수는, 참조형이다.
    - 기본형 변수는 값을 직접 저장하지만, 참조형 변수는 참조(주소)를 저장한다.
    - 기본형 변수는 산술연산을 수행할수있지만, 참조형 변수는 산술연산을 수행할수없다.
    - 기본형 변수는 null 을 할당할수없지만, 참조형 변수는 null 을 할당할수있다.

기본형 vs 참조형 (대입)
    - 기본형과 참조형 모두 대입시 변수 안에 있는 값을 읽고 복사해서 전달한다.
    - 기본형은 사용하는 값을 복사해서 전달하고, 참조형은 참조값을 복사해서 전달한다. (실제 인스턴스가 복사되는게아닌 인스턴스를 가리키는 참조값을 복사해서 전달)

기본형 vs 참조형 (메소드 호출)
    - 메서드 호출시 기본형은 메서드 내부에서 파라미터의 값을 변경해도 호출자의 변수 값에는 영향이없다.
    - 메서드 호출시 참조형은 메서드 내부에서 파라미터로 전달된 객체의 맴버 변수를 변경하면 호출자의 객체도 변경된다.


절차지향 프로그래밍 vs 객체지향 프로그래밍
- 둘의 차이는 절차지향은 데이터와 해당 데이터에 대한 처리방식이 분리되어있다 반면에 객체지향에서는 데이터와 그 데이터에 대한 행동(메서드)이 하나의 객체안에 포함되어있다.
- 객체지향 프로그래밍과 절차지향 프로그래밍은 서로 대치되는 개념이아니다. 객체지향이라도 프로그램의 작동순서는 중요하다 다만 어디에 더 초점을 맞추는가에 둘의 차이가있다.
  객체지향의 경우 객체의 설계와 관계를 중시한다. 반면 절차 지향의 경우 데이터와 기능이 분리되어있고 프로그램이 어떻게 작동되는지 그순서에 초점을맞춘다.

- 절차지향 프로그래밍
    - 실행순서를 중요하게 생각하는 방식.
    - 프로그램의 흐름을 순차적으로 따르며 처리하는방식. 즉 어떻게? 를 중심으로 프로그래밍한다.

- 객체지향 프로그래밍
    - 객체를 중요하게 생각하는 방식.
    - 실제 세계의 사건이나 사물을 객체로보고, 이러한 객체들간의 상호작용을 중심으로 프로그래밍하는방식, 즉 무엇을? 중심으로 프로그래밍한다.



MusicPlayer 클래스를 보면 음악플레이어를 구성하기위한 속성과 기능이 하나의 캡슐에 쌓여있는것 같다 이렇게 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는걸 캡슐화라고한다


-생성자
    - new 키워드를 사용해서 객체를 생성할때 마지막에 괄호() 도 포함해야 하는 이유가 바로 생성자 때문이다 객체를 생성하면서 동시에 생성자를 호출한다는 의미를 포함하고있다.

기본생성자
    - 매개변수가 없는 생성자를 기본생성자라고한다.
    - 클래스에 생성자가 하나도 없으면 자바 컴파일러는 매개변수가 없고 작동하는 코드가없는 기본 생성자를 자동으로 만들어준다.
    - 생성자가 하나라도 있으면 자바는 기본생성자를 만들지 않는다.
    - 생성자는 반드시 호출되어야한다.


- this() 라는 기능을 사용하면 생성자 내부에서 자신의 생성자를 호출할수있다. 참고로 this 는 인스턴스 자신의 참조값을 가리킨다 그래서 자신의 생성자를 호출한다고 생각하면된다
    - this()는 생성자 내부에서만 사용가능
    - this()는 생성자 코드의 첫줄에만 작성할수있다.


패키지
    - 다른패키지의 같은이름의 클래스가있다면 둘중하나만 임포트가 가능하다 나머지하나는 어쩔수없이 풀네임을 써주어야한다.

    - 패키지 규칙
        - 패캐지의 이름과 위치는 폴더(디렉토리)위치와 같아야한다 *필수
        - 패키지 이름은 모두 소문자를 사용한다 (관례)
        - 패키지 이름의 앞 부분에는 일반적으로 희사의 도메인 이름을 거꾸로 사용한다 ex) com.company.myapp  (관례)

    - 패키지와 계층구조
        - 패캐지는 사람들이 보기좋게 계층구조로 표현될뿐 전혀다른 패키지이다 서로연관이없다 그래서 다른패키지를 사용하려면 임포트해야한다


접근제어자
    - private : 모든 외부 호출을 막는다 ( 클래스에서만 호출가능 )
    - default (package-private) : 같은 패키지안에서 호출은 허용한다.
    - protected : 같은 패키지안에서 호출은 허용한다. 패키지가 달라도 상속 관계의 호출은 허용한다.
    - public : 모든 외부 호출을 허용한다.

    접근제어자사용-클래스레벨
    - 규칙
        - 클래스 레벨의 접근 제어자는 public, default 만 사용할수있다.
        - public 클래스는 반드시 파일명과 이름이 같아야한다.
            - 하나의 자바파일에 public 클래스는 하나만 등장할수있다.
            - 하나의 자바파알에 default 접근제어자를 사용하는 클래스는 무한정 만들수있다.

자바 메모리 구조
    * 비유 *
-   자바가 실행되면 JVM 내부에 이러한 메모리 구조를 가지고 동작한다.
    - 메서드 영역 : 클래스 정보를 보관, 클래스정보가 붕어빵 틀이다.
    - 스택 영역 : 실제 프로그램이 실행되는 영역, 메서디를 실행할때마다 하나씩 쌓인다.
    - 힙 영역 : 객체(인스턴스)가 생성되는 영역, new 명령어를 사용하면 이영역을 사용, 쉽게 이야기하면 붕어빵틀로부터 생성된 붕어빵이 존재하는공간, 배열도 이영역에 생성


    * 실제 *
    - 메서드 영역 : 메서드 영역은 프로그램을 실행하는데 필요한 공통 데이터를 관리한다, 이 영역은 프로그램의 모든 영역에서 공유한다.
        - 클래스정보 : 클래스의 실행코드(바이트코드), 필드, 메서드와 생성자 코드 등 모든 실행 코드가 존재한다.
        - static 영역 : static 변수들을 보관한다.
        - 런타임 상수 풀 : 프로그램을 실행하는데 필요한 공통 리터럴 상수를 보관한다. 예를들어 프로그램에
                        "hello" 라는 리터럴 문자가있으면 이런문자를 공통으로 묶어서 관리한다, 이외에도 프로그램들을 효율적으로 관리하기위한 상수들을 관리한다.

    - 스택 영역 : 자바 실행시, 하나의 실행 스택이 생성된다. 각 스택 프레임은 지역변수, 중간연산결과, 메서드 호출 정보등을 포함한다
        - 스택 프레임 : 스택 영역에 쌓이는 네모박스 하나가 스택프레임이다. 메서드를 호출할때마다 하나의 스택프레임이 쌓이고, 메서드가 종료되면 해당 스택프레임이 제거된다.

    - 힙 영역 : 객체(인스턴스)와 배열이 생성되는 영역, 가비지컬렉션이 이루어지는 주요 영역이며 더이상 참조되지않는 객체는 GC에 의해 제거된다.

    ** 참고 : 스택 영역은 더 정확히는 각 쓰레드별로 하나의 실행 스텍이 생성된다. 따라서 쓰레드 수만큼 스택 영역이 생성된다.
             지금은 쓰레드를 1개만 사용하므로 스택영역도 하나이다. 쓰레드에 대한 부분은 멀티쓰레드를 학습해야 이해할수있다.

    *** 자바에서 특정클래스로 100개의 인스턴스를 생성하면 힙메모리에 100 개의 인스턴스가 생긴다. 각각의 인스턴스는 내부에 변수와 메서드를 가진다.
        같은 클래스로부터 생성된 객체라도 인스턴스 내부의 변수값은 서로 다를수있지만 메서드는 공통된 코드를 공유한다
        따라서 객체가 생성될때 인스턴스 변수는 메모리에 할당되지만, 메서드에 대한 새로운 메모리 할당은없다 메서드는 메서드영역에서 공통으로 관리되고 실행한다.
        -> 객체의 변수값은 다를수있어 힙메모리에 생성되지만 메서드는 똑같으므로 메서드영역에서 관리하며 메서드 영역에 있는 코드를 불러서 실행한다.

스택과 큐 자료 구조
    스택(Stack) : 후입선출(LIFO)
    큐(Queue) : 선입선출(FIFO)


- 스태틱이 붙은 맴버변수는 메서드 영역에서 관리한다.

변수와 생명주기
    - 지역변수 (매개변수포함) : 지역변수는 스택 영역에 있는 스택프레임안에 보관된다. 메서드가 종료되면 스택 프레임도 제거되는데 이때 해당 스택 프레임에 포함된
                           지역변수도 함께 제거된다. 따라서 지역변수는 생존주기가 짧다.

    - 인스턴스 변수 : 인스턴스에 있는 맴버 변수를 인스턴스 변수라 한다. 인스턴스 변수는 힙영역을 사용한다. 힙영역은 GC 가 발생하기전까지 생존한다

    - 클래스변수 : 클래스 변수는 메서드 영역의 static 영역에 보관되는 변수이다. 메서드 영역은 프로그램 전체에서 사용하는 공용공간이다 클래스 변수는 해당 클래스가
                JVM 에 로딩되는 순간 생성된다 그리고 JVM 이 종료될때까지 생명주기가 이어진다.

    ** static 이 정적이라는 이유는 여기에있다 힙영역에 생성되는 인스턴스 변수는 동적으로 생성되고, 제거된다. 반면에 static 정적변수는
        프로그램 실행시점에 생성되고 프로그램 종료시점에 제거된다


  **정적메서드는 클래스이름을 통해 바로 호출할수있다. 그래서 인스턴스처럼 참조개념이없다.
    특정 인스턴스 기능을 사용하려면 참조값을 알아야하는데 정적메소드는 참조값 없이 호출한다.
    따라서 정적 메서드 내부에서 인스턴스 변수나 인스턴스 메서드를 사용할수없다.


