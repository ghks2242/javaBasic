클래스, 객체, 인스턴스
클래스는 설계도이고, 이설계도를 기반으로 실제 메모리에 만들어진(new 로 생성) 실체를 객체또는 인스턴스라고한다. 둘다 같은 의미로 사용

int , long, double, boolean 등등은 원시타입형 이라 소문자로 시작
String 은 클래스라 앞에 대문자로 시작한다
자바에서는 클래스는 앞에 대문자를 사용한다.

new 로 사용해서 객체를 생성하게되면 자동으로 초기화를 해준다.
int = 0, boolean = false, 참조형 = null

***** 자바에서는 아무도 참조하지않는 인스턴스가있으면 JVM 의 GC가 더이상 사용하지않는 인스턴스라고 판단하고 자동으로 메모리에서 삭제해준다.

정리
대원칙: 자바는 항상 변수의 값을 복사해서 대입한다.
기본형이면 변수에 들어있는 실제값을 복사해서 대입하고
참조형이면 변수에 들어있는 참조값을 복사해서 대입한다.

- 기본형 vs 참조형 (기본)
    - 자바의 데이터 타입을 가장 크게 보면 기본형과 참조형으로 나눌수있다.
    - 기본형을 제외한 나머지 변수는 모두 참조형이다. 클래스와 배열을 다루는 변수는, 참조형이다.
    - 기본형 변수는 값을 직접 저장하지만, 참조형 변수는 참조(주소)를 저장한다.
    - 기본형 변수는 산술연산을 수행할수있지만, 참조형 변수는 산술연산을 수행할수없다.
    - 기본형 변수는 null 을 할당할수없지만, 참조형 변수는 null 을 할당할수있다.

기본형 vs 참조형 (대입)
    - 기본형과 참조형 모두 대입시 변수 안에 있는 값을 읽고 복사해서 전달한다.
    - 기본형은 사용하는 값을 복사해서 전달하고, 참조형은 참조값을 복사해서 전달한다. (실제 인스턴스가 복사되는게아닌 인스턴스를 가리키는 참조값을 복사해서 전달)

기본형 vs 참조형 (메소드 호출)
    - 메서드 호출시 기본형은 메서드 내부에서 파라미터의 값을 변경해도 호출자의 변수 값에는 영향이없다.
    - 메서드 호출시 참조형은 메서드 내부에서 파라미터로 전달된 객체의 맴버 변수를 변경하면 호출자의 객체도 변경된다.


절차지향 프로그래밍 vs 객체지향 프로그래밍
- 둘의 차이는 절차지향은 데이터와 해당 데이터에 대한 처리방식이 분리되어있다 반면에 객체지향에서는 데이터와 그 데이터에 대한 행동(메서드)이 하나의 객체안에 포함되어있다.
- 객체지향 프로그래밍과 절차지향 프로그래밍은 서로 대치되는 개념이아니다. 객체지향이라도 프로그램의 작동순서는 중요하다 다만 어디에 더 초점을 맞추는가에 둘의 차이가있다.
  객체지향의 경우 객체의 설계와 관계를 중시한다. 반면 절차 지향의 경우 데이터와 기능이 분리되어있고 프로그램이 어떻게 작동되는지 그순서에 초점을맞춘다.

- 절차지향 프로그래밍
    - 실행순서를 중요하게 생각하는 방식.
    - 프로그램의 흐름을 순차적으로 따르며 처리하는방식. 즉 어떻게? 를 중심으로 프로그래밍한다.

- 객체지향 프로그래밍
    - 객체를 중요하게 생각하는 방식.
    - 실제 세계의 사건이나 사물을 객체로보고, 이러한 객체들간의 상호작용을 중심으로 프로그래밍하는방식, 즉 무엇을? 중심으로 프로그래밍한다.



MusicPlayer 클래스를 보면 음악플레이어를 구성하기위한 속성과 기능이 하나의 캡슐에 쌓여있는것 같다 이렇게 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는걸 캡슐화라고한다

